{
  "name": "wige-dev",
  "version": "1.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve --port 5000",
    "build": "ng build",
    "build:prod": "ng build --configuration production",
    "watch": "ng build --watch --configuration development",
    "test": "ng test",
    "test:nowatch": "ng test --watch false",
    "style": "import-sort -l \"**/{src,tests,e2e}/**/*.ts\" && prettier --check \"**/{src,tests,e2e}/**/*.{*css,ts}\"",
    "style:fix": "import-sort --write \"**/{src,tests,e2e}/**/*.ts\" && prettier --write \"**/{src,tests,e2e}/**/*.{*css,ts}\" && js-beautify \"**/src/**/*.html\"",
    "lint": "run-p lint:ts lint:tsc",
    "lint:fix": "run-s lint:ts:fix lint:tsc",
    "lint:ts": "tslint --config tslint.json --project . -e \"**/{test,polyfills}.ts\"",
    "lint:ts:fix": "tslint --config tslint.json --fix --project . -e \"**/{test,polyfills}.ts\"",
    "lint:tsc": "tsc --noEmit --skipLibCheck",
    "init:env": "init-dev-env generate-dot-env example.env -f",
    "predocker:build": "npm run build",
    "docker:build": "cross-conf-env docker image build . -t $npm_package_config_imageRepo:$npm_package_version",
    "postdocker:build": "npm run docker:tag",
    "docker:tag": " cross-conf-env docker image tag $npm_package_config_imageRepo:$npm_package_version $npm_package_config_imageRepo:latest",
    "docker:stop": "cross-conf-env docker stop $npm_package_config_imageName || true",
    "docker:run": "run-s -c docker:stop docker:runHelper",
    "docker:runHelper": "cross-conf-env docker run -e NODE_ENV=local --rm --name $npm_package_config_imageName -d -p $npm_package_config_imagePort:$npm_package_config_internalContainerPort $npm_package_config_imageRepo",
    "predocker:publish": "echo Attention! Ensure `docker login` information is correct.",
    "docker:publish": "cross-conf-env docker image push $npm_package_config_imageRepo:$npm_package_version",
    "postdocker:publish": "cross-conf-env docker image push $npm_package_config_imageRepo:latest",
    "docker:taillogs": "echo Web Server Logs: && cross-conf-env docker logs -f $npm_package_config_imageName",
    "docker:open": "sleep 2 && cross-conf-env open-cli http://localhost:$npm_package_config_imagePort",
    "docker:debugmessage": "echo Docker Debug Completed Successfully! Hit Ctrl+C to terminate log tailing.",
    "docker:debug": "run-s -cs docker:build docker:run docker:open docker:debugmessage docker:taillogs"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "~13.0.0",
    "@angular/cdk": "~13.0.0",
    "@angular/common": "~13.0.0",
    "@angular/compiler": "~13.0.0",
    "@angular/core": "~13.0.0",
    "@angular/flex-layout": "13.0.0-beta.36",
    "@angular/forms": "~13.0.0",
    "@angular/material": "~13.0.0",
    "@angular/platform-browser": "~13.0.0",
    "@angular/platform-browser-dynamic": "~13.0.0",
    "@angular/router": "~13.0.0",
    "module": "^1.2.5",
    "rxjs": "~7.4.0",
    "tslib": "^2.3.1",
    "zone.js": "~0.11.4"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "~13.0.0",
    "@angular/cli": "~13.0.0",
    "@angular/compiler-cli": "~13.0.0",
    "@types/jasmine": "~3.10.2",
    "@types/node": "^16.11.12",
    "cross-conf-env": "^1.2.1",
    "dev-norms": "^1.7.1",
    "import-sort": "^6.0.0",
    "import-sort-cli": "^6.0.0",
    "import-sort-parser-typescript": "^6.0.0",
    "import-sort-style-module": "^6.0.0",
    "init-dev-env": "^1.0.0",
    "jasmine-core": "~3.10.1",
    "js-beautify": "^1.14.0",
    "karma": "~6.3.9",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage": "~2.1.0",
    "karma-jasmine": "~4.0.1",
    "karma-jasmine-html-reporter": "~1.7.0",
    "mrm-task-angular-vscode": "^1.10.0",
    "npm-run-all": "^4.1.5",
    "open-cli": "^7.0.1",
    "prettier": "^2.5.1",
    "rimraf": "^3.0.2",
    "tslint": "^6.1.3",
    "tslint-config-prettier": "^1.18.0",
    "tslint-etc": "^1.13.10",
    "tslint-plugin-prettier": "^2.3.0",
    "typescript": "~4.4.2"
  },
  "importSort": {
    ".ts, .tsx": {
      "parser": "typescript",
      "style": "module",
      "options": {}
    }
  },
  "config": {
    "imageRepo": "[namespace]/[repository]",
    "imageName": "custom_app_name",
    "imagePort": "3000",
    "internalContainerPort": "3000"
  }
}
